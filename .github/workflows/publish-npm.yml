name: Publish to NPM

on:
  push:
    tags:
      - '*-v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    name: Publish package to NPM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract package and version from tag
        id: tag-info
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Extract package name and version from tag format: <package-name>-v<version>
          if [[ $TAG_NAME =~ ^(.+)-v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
          else
            echo "Invalid tag format: $TAG_NAME. Expected format: <package-name>-v<version>"
            exit 1
          fi
          
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing package: $PACKAGE_NAME version: $VERSION"
          
          # Determine package directory (libs only)
          if [ -d "libs/$PACKAGE_NAME" ]; then
            PACKAGE_DIR="libs/$PACKAGE_NAME"
          else
            echo "Package directory not found for: $PACKAGE_NAME"
            exit 1
          fi
          
          echo "package_dir=$PACKAGE_DIR" >> $GITHUB_OUTPUT
          echo "Package directory: $PACKAGE_DIR"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: |
          VERSION=${{ steps.tag-info.outputs.version }}
          PACKAGE_DIR=${{ steps.tag-info.outputs.package_dir }}
          cd $PACKAGE_DIR
          npm version $VERSION --no-git-tag-version --allow-same-version

      - name: Run tests
        run: npx nx test ${{ steps.tag-info.outputs.package_name }}

      - name: Build package
        run: npx nx build ${{ steps.tag-info.outputs.package_name }}

      - name: Publish to NPM
        run: |
          PACKAGE_DIR=${{ steps.tag-info.outputs.package_dir }}
          cd $PACKAGE_DIR
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.tag-info.outputs.version }}';
            const tagName = '${{ steps.tag-info.outputs.tag_name }}';
            const packageName = '${{ steps.tag-info.outputs.package_name }}';
            const packageDir = '${{ steps.tag-info.outputs.package_dir }}';
            
            // Read package.json to get the npm package name
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync(`${packageDir}/package.json`, 'utf8'));
            const npmPackageName = packageJson.name;
            
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `${packageName} v${version}`,
                body: `## ${packageName} v${version}\n\nPublished to NPM: https://www.npmjs.com/package/${npmPackageName}\n\n### Installation\n\`\`\`bash\nnpm install ${npmPackageName}@${version}\n\`\`\`\n\n### What's Changed\n\nSee the [commit history](https://github.com/${context.repo.owner}/${context.repo.repo}/commits/${tagName}) for details.`,
                draft: false,
                prerelease: version.includes('-') || version.includes('alpha') || version.includes('beta')
              });
              console.log(`Created release for ${tagName}`);
            } catch (error) {
              console.error('Error creating release:', error.message);
            }

      - name: Summary
        run: |
          VERSION=${{ steps.tag-info.outputs.version }}
          PACKAGE_NAME=${{ steps.tag-info.outputs.package_name }}
          PACKAGE_DIR=${{ steps.tag-info.outputs.package_dir }}
          
          # Read npm package name from package.json
          NPM_PACKAGE_NAME=$(node -p "require('./$PACKAGE_DIR/package.json').name")
          
          echo "## ✅ Successfully published $PACKAGE_NAME v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package: [$NPM_PACKAGE_NAME](https://www.npmjs.com/package/$NPM_PACKAGE_NAME)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Tag: \`${{ steps.tag-info.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install $NPM_PACKAGE_NAME@${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
